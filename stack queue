#include <stdio.h>
#include <stdlib.h>

// Node structure for linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->next = NULL;
    return node;
}

// Stack structure using linked list
struct Stack {
    struct Node* top;
};

// Function to initialize a stack
void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}

// Function to check if the stack is empty
int isStackEmpty(struct Stack* stack) {
    return (stack->top == NULL);
}

// Function to push an element into the stack
void push(struct Stack* stack, int data) {
    struct Node* node = newNode(data);
    node->next = stack->top;
    stack->top = node;
    printf("%d pushed to stack.\n", data);
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isStackEmpty(stack)) {
        printf("Stack underflow: cannot pop from an empty stack.\n");
        return -1;
    }
    struct Node* temp = stack->top;
    int popped = temp->data;
    stack->top = stack->top->next;
    free(temp);
    return popped;
}

// Queue structure using linked list
struct Queue {
    struct Node *front, *rear;
};

// Function to initialize a queue
void initializeQueue(struct Queue* queue) {
    queue->front = queue->rear = NULL;
}

// Function to check if the queue is empty
int isQueueEmpty(struct Queue* queue) {
    return (queue->front == NULL);
}

// Function to enqueue an element into the queue
void enqueue(struct Queue* queue, int data) {
    struct Node* node = newNode(data);
    if (isQueueEmpty(queue)) {
        queue->front = queue->rear = node;
        printf("%d enqueued to queue.\n", data);
        return;
    }
    queue->rear->next = node;
    queue->rear = node;
    printf("%d enqueued to queue.\n", data);
}

// Function to dequeue an element from the queue
int dequeue(struct Queue* queue) {
    if (isQueueEmpty(queue)) {
        printf("Queue underflow: cannot dequeue from an empty queue.\n");
        return -1;
    }
    struct Node* temp = queue->front;
    int dequeued = temp->data;
    queue->front = queue->front->next;
    free(temp);
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    return dequeued;
}

// Function to display the menu
void displayMenu() {
    printf("\nMenu:\n");
    printf("1. Push into stack\n");
    printf("2. Pop from stack\n");
    printf("3. Enqueue into queue\n");
    printf("4. Dequeue from queue\n");
    printf("5. Exit\n");
}

int main() {
    struct Stack stack;
    struct Queue queue;
    initializeStack(&stack);
    initializeQueue(&queue);

    int choice, data;

    do {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to push into stack: ");
                scanf("%d", &data);
                push(&stack, data);
                break;
            case 2:
                data = pop(&stack);
                if (data != -1) {
                    printf("Popped element: %d\n", data);
                }
                break;
            case 3:
                printf("Enter data to enqueue into queue: ");
                scanf("%d", &data);
                enqueue(&queue, data);
                break;
            case 4:
                data = dequeue(&queue);
                if (data != -1) {
                    printf("Dequeued element: %d\n", data);
                }
                break;
            case 5:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    return 0;
}
