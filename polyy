#include<stdlib.h>
#include <stdio.h>
struct node {
    int coef,expo;
    struct node *link;
    
};
struct node *Phead,*Qhead,*Rhead;
struct node * ReadPoly()
{
    
    struct node *ptr,*new,*head=NULL;
    int i,n;
    printf("\n enter the total number of terms : ");
    scanf("%d",&n);
    printf("enter the coefficent and exponents\n");
    for(i=0;i<n;i++)
    {
        printf("enter coeff and expo ");
        new=(struct node*)malloc(sizeof(struct node));
        scanf("%d",&new->coef);
        scanf("%d",&new->expo);
        new->link=NULL;
        if(head==NULL)
        {
            head=new;
            ptr=head;
        }
        else{
            ptr->link=new;
            ptr=new;
        }
    }return(head);
}
void DisplayPloy(struct node *head)
{
    struct node *ptr;
    if(head==NULL)
      printf("empty");
    else
    {
        ptr=head;
        while(ptr->link!=NULL)
        {
            printf("%dx^%d+",ptr->coef,ptr->expo);
          ptr=ptr->link;
        } printf("%dx^%d",ptr->coef,ptr->expo);
    }
}
struct node *Mulpoly()
{
    struct node *new,*P,*Q,*R,*prev,*head=NULL;
    P=Phead;
    Q=Qhead;
    while(P!=NULL)
    {
        while(Q!=NULL)
        {
              new =(struct node *)malloc(sizeof(struct node));
            new->coef=Q->coef*P->coef;
            new->expo=Q->expo+P->coef;
            new->link=NULL;
          
        if(head==NULL)
        {
            head=new;
            R=head;
        }
        else{
            R->link=new;
            R=new;
        }Q=Q->link;
    }
    P=P->link;
    Q=Qhead;
    
}
P=head;
while(P!=NULL)
{
    prev=P;
    Q=P->link;
    while(Q!=NULL){
        if(P->expo==Q->expo)
        {
            P->coef=P->coef+Q->coef;
            prev->link=Q->link;
            free(Q);
            Q=prev->link;
        
        }
        else
        {
            prev =Q;
            Q=Q->link;
        }
    }P=P->link;
}return(head);
}
struct node *Addpoly()
{
    struct node *new,*P,*Q,*R,*head=NULL;
    P=Phead;
    Q=Qhead;
    while(P!=NULL && Q!=NULL)
    {
        if(P->expo=Q->expo)
        {
            new =(struct node *)malloc(sizeof(struct node));
            new->coef=P->coef+Q->coef;
            new->expo=P->expo;
            new->link=NULL;
            P=P->link;
            Q=Q->link;
        }
        else if(P->expo>Q->expo)
        {
             new =(struct node *)malloc(sizeof(struct node));
            new->coef=P->coef;
            new->expo=P->expo;
            new->link=NULL;
            P=P->link;
        }
        else
        {
             new =(struct node *)malloc(sizeof(struct node));
            new->coef=Q->coef;
            new->expo=Q->expo;
            new->link=NULL;
            Q=Q->link;
        }
        if(head==NULL)
        {
            head=new;
            R=head;
        }
        else{
            R->link=new;
            R=new;
        }
    }

    while(P!=NULL)
    {
            new =(struct node *)malloc(sizeof(struct node));
            new->coef=P->coef;
            new->expo=P->expo;
            new->link=NULL;
        
        if(head==NULL)
        {
            head=new;
            R=head;
        }
        else{
            R->link=new;
            R=new;
        }
        P=P->link;
    }
    
       while(Q!=NULL)
    {
            new =(struct node *)malloc(sizeof(struct node));
            new->coef=Q->coef;
            new->expo=Q->expo;
            new->link=NULL;
        
        if(head==NULL)
        {
            head=new;
            R=head;
        }
        else{
            R->link=new;
            R=new;
        }
        Q=Q->link;
    }
    
return(head);
}
int main()
{
    printf("\n enter first polynomial");
    Phead=ReadPoly();
    printf("\n enter second polynomial");
    Qhead=ReadPoly();
    
    printf("\n first polynomial");
   DisplayPloy(Phead);
    printf("\n second polynomial");
    DisplayPloy(Qhead);
    Rhead=Mulpoly();
    printf("\n result polynomial");
   DisplayPloy(Rhead);
    
    
    return 0;
}
