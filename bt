#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void insertLeftThenRight(struct Node* root, int leftValue, int rightValue) {
    struct Node* leftNode = createNode(leftValue);
    struct Node* rightNode = createNode(rightValue);

    root->left = leftNode;
    root->right = rightNode;
}

void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void deleteLeft(struct Node* root) {
    if (root == NULL)
        return;

    struct Node* temp = root->left;
    if (temp != NULL) {
        root->left = NULL;
        free(temp);
    }
}

void deleteRight(struct Node* root) {
    if (root == NULL)
        return;

    struct Node* temp = root->right;
    if (temp != NULL) {
        root->right = NULL;
        free(temp);
    }
}

void deleteTree(struct Node* root) {
    if (root == NULL)
        return;

    deleteTree(root->left);
    deleteTree(root->right);
    free(root);
}

int main() {
    struct Node* root = createNode(1);

    int choice, leftValue, rightValue;
    do {
        printf("\nBinary Tree Operations:\n");
        printf("1. Insert at Left then Right\n");
        printf("2. Inorder Traversal\n");
        printf("3. Postorder Traversal\n");
        printf("4. Preorder Traversal\n");
        printf("5. Delete Left Leaf\n");
        printf("6. Delete Right Leaf\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter left value: ");
                scanf("%d", &leftValue);
                printf("Enter right value: ");
                scanf("%d", &rightValue);
                insertLeftThenRight(root, leftValue, rightValue);
                printf("Nodes inserted at left and right.\n");
                break;
            case 2:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 3:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 4:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 5:
                deleteLeft(root);
                printf("Left leaf node deleted.\n");
                break;
            case 6:
                deleteRight(root);
                printf("Right leaf node deleted.\n");
                break;
            case 7:
                deleteTree(root);
                printf("Exiting... Memory freed.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid choice.\n");
        }
    } while (choice != 7);

    return 0;
}
