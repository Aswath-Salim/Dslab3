#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node *createNode(int data) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node *insertLeaf(struct Node *root, int data) {
    if (root == NULL)
        return createNode(data);

    if (root->left == NULL)
        root->left = createNode(data);
    else if (root->right == NULL)
        root->right = createNode(data);
    else {
        root->left = insertLeaf(root->left, data);
    }
    return root;
}

void inorder(struct Node *root) {
    if (root == NULL)
        return;

    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

void preorder(struct Node *root) {
    if (root == NULL)
        return;

    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(struct Node *root) {
    if (root == NULL)
        return;

    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

struct Node *deleteLeaf(struct Node *root, int key) {
    if (root == NULL)
        return NULL;

    if (root->left == NULL && root->right == NULL && root->data == key) {
        free(root);
        return NULL;
    }

    root->left = deleteLeaf(root->left, key);
    root->right = deleteLeaf(root->right, key);

    return root;
}

void menu() {
    printf("\nBinary Tree Operations\n");
    printf("1. Insert a Leaf Node\n");
    printf("2. Inorder Traversal\n");
    printf("3. Preorder Traversal\n");
    printf("4. Postorder Traversal\n");
    printf("5. Delete a Leaf Node\n");
    printf("6. Exit\n");
}

int main() {
    struct Node *root = NULL;
    int choice, data, key;

    do {
        menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                root = insertLeaf(root, data);
                break;
            case 2:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 3:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 4:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 5:
                printf("Enter leaf node value to delete: ");
                scanf("%d", &key);
                root = deleteLeaf(root, key);
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 6);

    return 0;
}
