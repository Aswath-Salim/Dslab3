#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Node {
    int data;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjLists;
    int* visited;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int n) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = n;

    graph->adjLists = (struct Node**)malloc(n * sizeof(struct Node*));
    graph->visited = (int*)malloc(n * sizeof(int));

    int i;
    for (i = 0; i < n; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

void DFS(struct Graph* graph, int vertex) {
    struct Node* temp = graph->adjLists[vertex];
    graph->visited[vertex] = 1;
    printf("%d ", vertex);

    while (temp != NULL) {
        int connectedVertex = temp->data;
        if (graph->visited[connectedVertex] == 0) {
            DFS(graph, connectedVertex);
        }
        temp = temp->next;
    }
}

void BFS(struct Graph* graph, int startVertex) {
    int queue[MAX];
    int front = 0, rear = 0;
    int visited[MAX];

    for (int i = 0; i < graph->numVertices; i++) {
        visited[i] = 0;
    }

    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        struct Node* temp = graph->adjLists[currentVertex];

        while (temp) {
            int adjVertex = temp->data;
            if (visited[adjVertex] == 0) {
                visited[adjVertex] = 1;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }
}

int main() {
    int numVertices, src, dest, startVertex;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    struct Graph* graph = createGraph(numVertices);

    int choice;
    do {
        printf("\n1. Add an edge\n");
        printf("2. Perform Depth First Search (DFS)\n");
        printf("3. Perform Breadth First Search (BFS)\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter source and destination vertices (0 to %d): ", numVertices - 1);
                scanf("%d %d", &src, &dest);
                if (src >= 0 && src < numVertices && dest >= 0 && dest < numVertices) {
                    addEdge(graph, src, dest);
                } else {
                    printf("Invalid vertices! Vertices should be between 0 and %d\n", numVertices - 1);
                }
                break;
            case 2:
                printf("Enter starting vertex for DFS (0 to %d): ", numVertices - 1);
                scanf("%d", &startVertex);
                if (startVertex >= 0 && startVertex < numVertices) {
                    printf("Depth First Search starting from vertex %d: ", startVertex);
                    DFS(graph, startVertex);
                    printf("\n");
                } else {
                    printf("Invalid starting vertex! Vertex should be between 0 and %d\n", numVertices - 1);
                }
                break;
            case 3:
                printf("Enter starting vertex for BFS (0 to %d): ", numVertices - 1);
                scanf("%d", &startVertex);
                if (startVertex >= 0 && startVertex < numVertices) {
                    printf("Breadth First Search starting from vertex %d: ", startVertex);
                    BFS(graph, startVertex);
                    printf("\n");
                } else {
                    printf("Invalid starting vertex! Vertex should be between 0 and %d\n", numVertices - 1);
                }
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    } while (choice != 4);

    return 0;
}
