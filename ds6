#include <stdio.h>
#include <stdlib.h>

// Structure to represent a term in the polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term* next;
};

// Function to create a new term with given coefficient and exponent
struct Term* createTerm(int coef, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coefficient = coef;
    newTerm->exponent = exp;
    newTerm->next = NULL;
    return newTerm;
}

// Function to add a term to the polynomial
void addTerm(struct Term** poly, int coef, int exp) {
    struct Term* newTerm = createTerm(coef, exp);
    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term* temp = *poly;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newTerm;
    }}

// Function to display the polynomial
void displayPoly(struct Term* poly) {
    struct Term* temp = poly;
    while (temp != NULL) {
        printf("%dx^%d ", temp->coefficient, temp->exponent);
        if (temp->next != NULL) {
            printf("+ ");
        }
        temp = temp->next;
    }
    printf("\n");
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL;
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exponent > poly2->exponent) {
            addTerm(&result, poly1->coefficient, poly1->exponent);
            poly1 = poly1->next;
        } else if (poly1->exponent < poly2->exponent) {
            addTerm(&result, poly2->coefficient, poly2->exponent);
            poly2 = poly2->next;
        } else {
            addTerm(&result, poly1->coefficient + poly2->coefficient, poly1->exponent);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add remaining terms of poly1, if any
    while (poly1 != NULL) {
        addTerm(&result, poly1->coefficient, poly1->exponent);
        poly1 = poly1->next;
    }

    // Add remaining terms of poly2, if any
    while (poly2 != NULL) {
        addTerm(&result, poly2->coefficient, poly2->exponent);
        poly2 = poly2->next;
    }

    return result;
}

// Function to free memory allocated for polynomial
void freePoly(struct Term* poly) {
    struct Term* temp;
    while (poly != NULL) {
        temp = poly;
        poly = poly->next;
        free(temp);
    }
}

int main() {
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;
    struct Term* result = NULL;
    int choice, coef, exp;

    do {
        printf("Menu:\n");
        printf("1. Add term to polynomial 1\n");
        printf("2. Add term to polynomial 2\n");
        printf("3. Display polynomial 1\n");
        printf("4. Display polynomial 2\n");
        printf("5. Add polynomials\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter coefficient and exponent for polynomial 1 term: ");
                scanf("%d %d", &coef, &exp);
                addTerm(&poly1, coef, exp);
                break;
            case 2:
                printf("Enter coefficient and exponent for polynomial 2 term: ");
                scanf("%d %d", &coef, &exp);
                addTerm(&poly2, coef, exp);
                break;
            case 3:
                printf("Polynomial 1: ");
                displayPoly(poly1);
                break;
            case 4:
                printf("Polynomial 2: ");
                displayPoly(poly2);
                break;
            case 5:
                printf("Adding polynomials...\n");
                result = addPolynomials(poly1, poly2);
                printf("Resultant polynomial: ");
                displayPoly(result);
                freePoly(result);
                break;
            case 6:
                // Exit the program and free allocated memory
                freePoly(poly1);
                freePoly(poly2);
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 6);

    return 0;
}
