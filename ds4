#include <stdio.h>
#define MAX_SIZE 100

struct PriorityQueueElement {
    int value;
    int priority;
};

struct PriorityQueueElement priorityQueue[MAX_SIZE];
int front = -1;
int rear = -1;

void enqueue(int value, int priority) {
    if (rear == MAX_SIZE - 1) {
        printf("Priority Queue is full. Cannot enqueue element.\n");
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        priorityQueue[rear].value = value;
        priorityQueue[rear].priority = priority;
        printf("Element %d enqueued to the Priority Queue with priority %d.\n", value, priority);
    }
}

void dequeue() {
    if (front == -1) {
        printf("Priority Queue is empty. Cannot dequeue element.\n");
    } else {
        int highestPriorityIndex = front;
        for (int i = front + 1; i <= rear; i++) {
            if (priorityQueue[i].priority < priorityQueue[highestPriorityIndex].priority) {
                highestPriorityIndex = i;
            }
        }
        printf("Element %d dequeued from the Priority Queue with priority %d.\n",
               priorityQueue[highestPriorityIndex].value,
               priorityQueue[highestPriorityIndex].priority);
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            for (int i = highestPriorityIndex; i < rear; i++) {
                priorityQueue[i] = priorityQueue[i + 1];
            }
            rear--;
        }
    }
}

void display() {
    if (front == -1) {
        printf("Priority Queue is empty.\n");
    } else {
    int temp,temp1;
    for(int i=0;i<4;i++)
     {
     for(int j=i+1;j<4;j++)
     {
     if(priorityQueue[i].priority<priorityQueue[j].priority)
     {
     temp=priorityQueue[i].priority;
     temp1=priorityQueue[i].value;
     priorityQueue[i].priority=priorityQueue[j].priority;
     priorityQueue[i].value=priorityQueue[j].value;
     priorityQueue[j].value=temp;
     priorityQueue[j].priority=temp1;
     }
     }
     }
        printf("Priority Queue elements (Value, Priority): ");
        for (int i = front; i <= rear; i++) {
            printf("(%d, %d) ", priorityQueue[i].value, priorityQueue[i].priority);
        }
        printf("\n");
    }
}

int main() {
    int choice, value, priority;
    while (1) {
        printf("Priority Queue Menu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to enqueue: ");
                scanf("%d", &value);
                printf("Enter the priority of the element: ");
                scanf("%d", &priority);
                enqueue(value, priority);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting the program. Goodbye!\n");
                return 0;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    }
}
